<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.tarena.dao.CostMapper">

	<resultMap id="RM_cost" type="com.tarena.entity.ChiCost">
        <id column="cost_id" property="cost_id"  />
     	<result property="name" column="name" />
        <result property="base_duration" column="base_duration" />
        <result property="base_cost" column="base_cost" />
        <result property="unit_cost" column="unit_cost" />
        <result property="status" column="status" />
        <result property="descr" column="descr" />
        <result property="creatime" column="creatime" />
        <result property="startime" column="startime" />
        <result property="cost_type" column="cost_type" />
	</resultMap>
	
	<select id="findAllCost" resultMap="RM_cost">
		select * from cost
	</select>
	
	<!-- save -->
	<!-- 
		1.当传入对象的属性为null时，在执行该SQL时会报错。
		  但是在项目中，新增时很多字段是可以为空的，因此
		  必须要解决这个问题。
		2.该问题产生的原因是，在执行SQL时MyBatis会自动
		  通过对象中的属性给SQL中参数赋值，它会自动将Java
		  类型转换成数据库的类型。而一旦传入的是null它就
		  无法准确判断这个类型应该是什么，就有可能将类型
		  转换错误，从而报错。
		3.要解决这个问题，需要针对这些可能为空的字段，手
		  动指定其转换时用到的类型。
		4.一般情况下，我们没有必要按个字段去识别/判断它
		  是否可以为空，而是将所有的字段都当做可以为空，
		  全部手动设置转换类型。
	 -->
	 <!-- 让添加可以为空 -->
	<!--  <insert id="addCost" parameterType="com.tarena.entity.Cost">
		<![CDATA[
		insert into cost values(
			seq_cost_lee.nextval,
			#{name,jdbcType=VARCHAR},
			#{base_duration,jdbcType=INTEGER},
			#{base_cost,jdbcType=DOUBLE},
			#{unit_cost,jdbcType=DOUBLE},
			#{status,jdbcType=CHAR},
			#{descr,jdbcType=VARCHAR},
			#{creatime,jdbcType=TIMESTAMP},
			#{startime,jdbcType=TIMESTAMP},
			#{cost_type,jdbcType=CHAR}
		)
	]]>
	</insert>
	
	<select id="findById" resultType="com.tarena.entity.Cost" parameterType="java.lang.Integer">
		select * from cost where cost_id=#{id}
	</select>
	让修改可以为空
	<update id="updateCost" parameterType="com.tarena.entity.Cost">
		<![CDATA[
			update cost set 
			name=#{name,jdbcType=VARCHAR}, 
			base_duration=#{base_duration,jdbcType=NUMERIC},
			base_cost=#{base_cost,jdbcType=NUMERIC},
			unit_cost=#{unit_cost,jdbcType=NUMERIC},
			descr=#{descr,jdbcType=VARCHAR},
			cost_type=#{cost_type,jdbcType=CHAR}
			where cost_id=#{cost_id}
		]]>
	</update>
	
	<delete id="deleteCost" parameterType="com.tarena.entity.Cost">
		delete from cost where cost_id=#{id}
	</delete>
	
	<select id="findByPage" resultType="com.tarena.entity.Cost" parameterType="com.tarena.entity.page.CostPage" >
		select * from(
			select rownum rn,t.* from(
				select * from cost order by cost_id) t)
		where rn between #{start} and #{end}
	</select>
	
	<select id="findByRow" resultType="int" >
		select count(cost_id) from cost
	</select>
	
	<select id="findNameId" resultType="hashmap" >
		select name,cost_id from cost
	</select>
	 -->
</mapper>
